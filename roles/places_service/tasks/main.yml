---
- name: Display stats of MariaDB, NGINX, and Places services
  service_facts:
  register: "service_state"

- name: "Install git"
  package:
    name: "git"
    state: "present"
  when: "'git' not in ansible_facts.packages"

- name: "Check if {{ app_user }} directory is already created"
  stat:
    path: "{{ app_directory }}"
  register: "app_user_directory_stat_result"

- name: "Create User {{ app_user }}"
  user:
    name: "{{ app_user }}"
    create_home: true
    system: true
    password: "{{ app_user_password}}"
  when: "app_user_directory_stat_result.stat.exists == False"

- name: "Check if {{ app_user }} application is already cloned"
  stat:
    path: "{{ app_directory }}"
  register: "app_directory_stat_result"

- name: "Git clone application"
  git:
    repo: "{{ application_github_link }}"
    dest: "{{ app_directory }}"
    update: false
  when: "app_directory_stat_result.stat.exists == False"

- name: "Configure Google Maps API"
  template:
    src: "{{ map_container_template }}"
    dest: "{{ map_container_template_dest }}"

- name: "Configure .env variables"
  template:
    src: "{{ env_file }}"
    dest: "{{ env_file_dest }}"

- name: "Change ownership of {{ app_user }} directory"
  file:
    path: "{{ app_directory }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: true
  when: "app_user_directory_stat_result.stat.exists == False"

- name: "Change file permission of {{ app_user }} directory"
  file:
    path: "{{ app_user_directory }}"
    mode: "0755"
    recurse: true
  when: "app_user_directory_stat_result.stat.exists == False"

- name: "Install server node dependencies"
  npm:
    path: "{{ app_directory }}/src"

- name: "Install client node dependencies"
  npm:
    path: "{{ app_client_directory }}"

- name: "create production build of react client"
  shell: "npm --prefix {{ app_client_directory }} run build"

- name: "install and setup NGINX"
  import_role:
    name: "nginx"

- name: "Check if {{ app_user }} service is already registered"
  stat:
    path: "/etc/systemd/system/{{ app_user }}.service"
  register: "app_service_stat_result"

- name: "Register {{ app_user }} service"
  template:
    src: "{{ app_service_template_src }}"
    dest: "{{ app_service_template_dest }}"
  when: "app_service_stat_result.stat.exists == False"

- name: "Ensure {{ app_user }} is enabled and restarted"
  systemd:
    name: "{{ app_user }}"
    enabled: true
    daemon_reload: yes
    state: "restarted"
...