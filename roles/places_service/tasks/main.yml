---
- name: Put SELinux in permissive mode, logging actions that would be blocked.
  selinux:
    policy: targeted
    state: permissive

- name: "Install yum-utils and git"
  package:
    name: "{{ item }}"
    state: present
  loop:
    - git
    - yum-utils

- name: "Create User {{ app_user }}"
  user:
    name: "{{ app_user }}"
    create_home: true
    system: true
    password: "{{ app_user_password }}"

- name: "Check if {{ app_user }} application is already cloned"
  stat:
    path: "{{ app_directory }}"
  register: "app_directory_stat_result"

- name: "Git clone application"
  git:
    repo: "{{ application_github_link }}"
    dest: "{{ app_directory }}"
    update: false
  when: "app_directory_stat_result.stat.exists == False"

- name: "Configure Google Maps API"
  copy:
    src: "{{ map_container_js }}"
    dest: "{{ map_container_dest_location }}"

- name: "Configure .env variables"
  template:
    src: "{{ env_file }}"
    dest: "{{ env_file_dest }}"

- name: "Change ownership of {{ app_user }} directory"
  file:
    path: "{{ app_directory }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: true

- name: "Change file permission of {{ app_user }} directory"
  file:
    path: "{{ app_user_directory }}"
    mode: "0755"
    recurse: true

- name: "Install node dependencies in src/"
  npm:
    path: "{{ app_directory }}/src"

- name: "Install node dependencies in src/client/"
  npm:
    path: "{{ app_client_directory }}"

- name: "create production build of react client"
  shell: "npm --prefix {{ app_client_directory }} run build"

- name: "install and setup NGINX"
  import_role:
    name: "nginx"

- name: "Check if {{ app_user }} service is already registered"
  stat:
    path: "/etc/systemd/system/{{ app_user }}.service"
  register: "app_service_stat_result"

- name: "Register {{ app_user }} service"
  template:
    src: "{{ app_service_template_src }}"
    dest: "{{ app_service_template_dest }}"
  when: "app_service_stat_result.stat.exists == False"

- name: "Ensure {{ app_user }} is enabled and restarted"
  systemd:
    name: "{{ app_user }}"
    enabled: true
    state: restarted
...