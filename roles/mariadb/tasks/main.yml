---
- name: Display status of both MariaDB and Places services
  service_facts:
  register: service_state

- name: "Check if MariaDB server/client are installed"
  package_facts:
    manager: "auto"

- name: "Install the Python MySQL Support Libraries"
  yum:
    name: MySQL-python
    state: latest

- name: "Set MariaDB server and client"
  shell: "curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash"
  args:
    warn: false
  when: "'MariaDB-server' not in ansible_facts.packages or 'MariaDB-client' not in ansible_facts.packages"

- name: "Install MariaDB"
  package:
    name: "{{ item }}"
    state: "latest"
  loop:
    - "MariaDB-server"
    - "MariaDB-client"
  when: "'MariaDB-server' not in ansible_facts.packages or 'MariaDB-client' not in ansible_facts.packages"

- name: "Start MySQL server and enable it on reboot"
  systemd:
    name: mariadb
    enabled: true
    state: started

- name: "Set MySQL root password"
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    user: root
    check_implicit_admin: true
    password: "{{ mysql_root_password }}"
    host: localhost

- name: "Create database user {{ database_user }} with all database privileges"
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: "{{ database_user }}"
    password: "{{ database_user_password }}"
    priv: '*.*:ALL'
    state: present
    host: localhost

- name: "Check if {{ database_dump_destination }} contains {{ database_dump_file_name }}"
  stat:
    path: "{{ database_dump_destination }}/{{ database_dump_file_name }}"
  register: "database_dump_transfer"

- name: Copy over database dump file
  copy:
    src="{{ database_dump_file_name }}" 
    dest="{{ database_dump_destination }}"
  notify:
    preload database
  when: "database_dump_transfer.stat.exists == False"

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers

# - name: restore data from dump file
#   shell: "mysql -u root -p{{ mysql_root_password }} < {{ database_dump_destination }}{{ database_dump_file_name }}"

- name: "Reload mariadb daemon and ensure it is restarted"
  systemd:
    name: mariadb
    enabled: true
    daemon_reload: true
    state: restarted
...